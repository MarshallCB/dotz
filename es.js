let e="\n  precision mediump float;\n  attribute vec2 a_pos;\n  varying vec2 v_tex_pos;\n  void main() {\n    v_tex_pos = a_pos;\n    gl_Position = vec4(1.0 - 2.0 * a_pos, 0, 1);\n  }\n";function t(e,t,r){var a=e.createShader(t);if(e.shaderSource(a,r),e.compileShader(a),!e.getShaderParameter(a,e.COMPILE_STATUS))throw new Error(e.getShaderInfoLog(a));return a}function r(e,r,a){var i=e.createProgram(),n=t(e,e.VERTEX_SHADER,r),o=t(e,e.FRAGMENT_SHADER,a);if(e.attachShader(i,n),e.attachShader(i,o),e.linkProgram(i),!e.getProgramParameter(i,e.LINK_STATUS))throw new Error(e.getProgramInfoLog(i));for(var s={program:i},c=e.getProgramParameter(i,e.ACTIVE_ATTRIBUTES),u=0;u<c;u++){var _=e.getActiveAttrib(i,u);s[_.name]=e.getAttribLocation(i,_.name)}for(var d=e.getProgramParameter(i,e.ACTIVE_UNIFORMS),l=0;l<d;l++){var p=e.getActiveUniform(i,l);s[p.name]=e.getUniformLocation(i,p.name)}return s}function a(e,t,r,a,i){var n=e.createTexture();return e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,t),r instanceof Uint8Array?e.texImage2D(e.TEXTURE_2D,0,e.RGBA,a,i,0,e.RGBA,e.UNSIGNED_BYTE,r):e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,r),e.bindTexture(e.TEXTURE_2D,null),n}function i(e,t,r){e.activeTexture(e.TEXTURE0+r),e.bindTexture(e.TEXTURE_2D,t)}function n(e,t){var r=e.createBuffer();return e.bindBuffer(e.ARRAY_BUFFER,r),e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW),r}function o(e,t,r,a){e.bindBuffer(e.ARRAY_BUFFER,t),e.enableVertexAttribArray(r),e.vertexAttribPointer(r,a,e.FLOAT,!1,0,0)}function s(e,t,r){e.bindFramebuffer(e.FRAMEBUFFER,t),r&&e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0)}const c=new Map;function u(e,t,r){e.width=e.clientWidth,e.height=e.clientHeight;let a=e.getContext("webgl",{antialiasing:!1}),i=new d(a,t,r);return function e(){i.draw(),requestAnimationFrame(e)}(),i}let _={fade:.96,colors:{"0.0":"#000","1.0":"#fff"},speed:.5,dropRate:.01,dropRateBump:.01,particles:1e5,windData:{width:360,height:180,uMin:-20,uMax:20,vMin:-20,vMax:20}};class d{constructor(t,a,i){this.gl=t,Object.assign(this,_,i),this.drawProgram=r(t,"\n  precision mediump float;\n  attribute float a_index;\n  uniform sampler2D u_particles;\n  uniform float u_particles_res;\n  varying vec2 v_particle_pos;\n  void main() {\n    vec4 color = texture2D(u_particles, vec2(\n      fract(a_index / u_particles_res),\n      floor(a_index / u_particles_res) / u_particles_res)\n    );\n\n    // decode current particle position from the pixel's RGBA value\n    v_particle_pos = vec2(\n      color.r / 255.0 + color.b,\n      color.g / 255.0 + color.a\n    );\n\n    gl_PointSize = 1.0;\n    gl_Position = vec4(2.0 * v_particle_pos.x - 1.0, 1.0 - 2.0 * v_particle_pos.y, 0, 1);\n  }\n","\n  precision mediump float;\n  uniform sampler2D u_wind;\n  uniform vec2 u_wind_min;\n  uniform vec2 u_wind_max;\n  uniform sampler2D u_color_ramp;\n  varying vec2 v_particle_pos;\n  void main() {\n    vec2 velocity = mix(u_wind_min, u_wind_max, texture2D(u_wind, v_particle_pos).rg);\n    float speed_t = length(velocity) / length(u_wind_max);\n    // color ramp is encoded in a 4x4 texture\n    vec2 ramp_pos = vec2(\n      fract(4.0 * speed_t),\n      floor(4.0 * speed_t) / 4.0\n    );\n    gl_FragColor = texture2D(u_color_ramp, ramp_pos);\n  }\n"),this.screenProgram=r(t,e,"\n  precision mediump float;\n  uniform sampler2D u_screen;\n  uniform float u_opacity;\n  varying vec2 v_tex_pos;\n  void main() {\n    vec4 color = texture2D(u_screen, 1.0 - v_tex_pos);\n    // a hack to guarantee opacity fade out even with a value close to 1.0\n    gl_FragColor = vec4(floor(255.0 * color * u_opacity) / 255.0);\n  }\n"),this.updateProgram=r(t,e,"\n  precision highp float;\n  uniform sampler2D u_particles;\n  uniform sampler2D u_wind;\n  uniform vec2 u_wind_res;\n  uniform vec2 u_wind_min;\n  uniform vec2 u_wind_max;\n  uniform float u_rand_seed;\n  uniform float u_speed_factor;\n  uniform float u_drop_rate;\n  uniform float u_drop_rate_bump;\n  varying vec2 v_tex_pos;\n  // pseudo-random generator\n  const vec3 rand_constants = vec3(12.9898, 78.233, 4375.85453);\n  float rand(const vec2 co) {\n    float t = dot(rand_constants.xy, co);\n    return fract(sin(t) * (rand_constants.z + t));\n  }\n  // wind speed lookup; use manual bilinear filtering based on 4 adjacent pixels for smooth interpolation\n  vec2 lookup_wind(const vec2 uv) {\n    // return texture2D(u_wind, uv).rg; // lower-res hardware filtering\n    vec2 px = 1.0 / u_wind_res;\n    vec2 vc = (floor(uv * u_wind_res)) * px;\n    vec2 f = fract(uv * u_wind_res);\n    vec2 tl = texture2D(u_wind, vc).rg;\n    vec2 tr = texture2D(u_wind, vc + vec2(px.x, 0)).rg;\n    vec2 bl = texture2D(u_wind, vc + vec2(0, px.y)).rg;\n    vec2 br = texture2D(u_wind, vc + px).rg;\n    return mix(mix(tl, tr, f.x), mix(bl, br, f.x), f.y);\n  }\n  void main() {\n    vec4 color = texture2D(u_particles, v_tex_pos);\n    vec2 pos = vec2(\n    color.r / 255.0 + color.b,\n    color.g / 255.0 + color.a); // decode particle position from pixel RGBA\n\n    vec2 velocity = mix(u_wind_min, u_wind_max, lookup_wind(pos));\n    float speed_t = length(velocity) / length(u_wind_max);\n\n    // take EPSG:4236 distortion into account for calculating where the particle moved\n    float distortion = cos(radians(pos.y * 180.0 - 90.0));\n    vec2 offset = vec2(velocity.x / distortion, -velocity.y) * 0.0001 * u_speed_factor;\n\n    // update particle position, wrapping around the date line\n    pos = fract(1.0 + pos + offset);\n\n    // a random seed to use for the particle drop\n    vec2 seed = (pos + v_tex_pos) * u_rand_seed;\n\n    // drop rate is a chance a particle will restart at random position, to avoid degeneration\n    float drop_rate = u_drop_rate + speed_t * u_drop_rate_bump;\n    float drop = step(1.0 - drop_rate, rand(seed));\n\n    vec2 random_pos = vec2(\n    rand(seed + 1.3),\n    rand(seed + 2.1));\n    pos = mix(pos, random_pos, drop);\n\n    // encode the new particle position back into RGBA\n    gl_FragColor = vec4(\n    fract(pos * 255.0),\n    floor(pos * 255.0) / 255.0);\n  }\n"),this.quadBuffer=n(t,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1])),this.framebuffer=t.createFramebuffer(),this.ready=!1,this.setTerrain=this.setTerrain.bind(this),this.setTerrain(a),this.resize()}get particles(){return this._particles}set particles(e){var t=this.gl,r=this.particleStateResolution=Math.ceil(Math.sqrt(e));this._particles=r*r;for(var i=new Uint8Array(4*this._particles),o=0;o<i.length;o++)i[o]=Math.floor(256*Math.random());this.particleStateTexture0=a(t,t.NEAREST,i,r,r),this.particleStateTexture1=a(t,t.NEAREST,i,r,r);for(var s=new Float32Array(this._particles),c=0;c<this._particles;c++)s[c]=c;this.particleIndexBuffer=n(t,s)}resize(){var e=this.gl,t=new Uint8Array(e.canvas.width*e.canvas.height*4);this.backgroundTexture=a(e,e.NEAREST,t,e.canvas.width,e.canvas.height),this.screenTexture=a(e,e.NEAREST,t,e.canvas.width,e.canvas.height)}set colors(e){this._colors=e;var t=document.createElement("canvas"),r=t.getContext("2d");t.width=16,t.height=1;var i=r.createLinearGradient(0,0,16,0);for(var n in e)i.addColorStop(Number(n),e[n]);r.fillStyle=i,r.fillRect(0,0,16,1);let o=new Uint8Array(r.getImageData(0,0,16,1).data);this.colorRampTexture=a(this.gl,this.gl.LINEAR,o,4,4)}get colors(){return this._colors}setTerrain(e){if(c.has(e))this.ready=!0,this.windTexture=a(this.gl,this.gl.LINEAR,c.get(e));else{const t=new Image,r=this.setTerrain;t.src=e,t.onload=function(){createImageBitmap(this).then((t=>{c.set(e,t),r(e)}))}}}draw(){if(this.ready){var e=this.gl;e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),i(e,this.windTexture,0),i(e,this.particleStateTexture0,1),this.drawScreen(),this.updateParticles()}}drawScreen(){var e=this.gl;s(e,this.framebuffer,this.screenTexture),e.viewport(0,0,e.canvas.width,e.canvas.height),this.drawTexture(this.backgroundTexture,this.fade),this.drawParticles(),s(e,null),e.enable(e.BLEND),e.blendFunc(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA),this.drawTexture(this.screenTexture,1),e.disable(e.BLEND);var t=this.backgroundTexture;this.backgroundTexture=this.screenTexture,this.screenTexture=t}drawTexture(e,t){var r=this.gl,a=this.screenProgram;r.useProgram(a.program),o(r,this.quadBuffer,a.a_pos,2),i(r,e,2),r.uniform1i(a.u_screen,2),r.uniform1f(a.u_opacity,t),r.drawArrays(r.TRIANGLES,0,6)}drawParticles(){var e=this.gl,t=this.drawProgram;e.useProgram(t.program),o(e,this.particleIndexBuffer,t.a_index,1),i(e,this.colorRampTexture,2),e.uniform1i(t.u_wind,0),e.uniform1i(t.u_particles,1),e.uniform1i(t.u_color_ramp,2),e.uniform1f(t.u_particles_res,this.particleStateResolution),e.uniform2f(t.u_wind_min,this.windData.uMin,this.windData.vMin),e.uniform2f(t.u_wind_max,this.windData.uMax,this.windData.vMax),e.drawArrays(e.POINTS,0,this._particles)}updateParticles(){var e=this.gl;s(e,this.framebuffer,this.particleStateTexture1),e.viewport(0,0,this.particleStateResolution,this.particleStateResolution);var t=this.updateProgram;e.useProgram(t.program),o(e,this.quadBuffer,t.a_pos,2),e.uniform1i(t.u_wind,0),e.uniform1i(t.u_particles,1),e.uniform1f(t.u_rand_seed,Math.random()),e.uniform2f(t.u_wind_res,this.windData.width,this.windData.height),e.uniform2f(t.u_wind_min,this.windData.uMin,this.windData.vMin),e.uniform2f(t.u_wind_max,this.windData.uMax,this.windData.vMax),e.uniform1f(t.u_speed_factor,this.speed),e.uniform1f(t.u_drop_rate,this.dropRate),e.uniform1f(t.u_drop_rate_bump,this.dropRateBump),e.drawArrays(e.TRIANGLES,0,6);var r=this.particleStateTexture0;this.particleStateTexture0=this.particleStateTexture1,this.particleStateTexture1=r}}export{u as dotz};
